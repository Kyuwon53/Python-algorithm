# 플로이드 워셜 알고리즘
# 모든 지점에서 다른 모든 지점까지의 최단 경로를 모두 구해야 하는 경우
# 단계마다 '거쳐 가는 노드'를 기준으로 알고리즘을 수행
# 매번 방문하지 않은 노드 중에서 최단 거리를 갖는 노드를 찾을 필요가 없다는 점이 다익스트라 알고리즘과 다른 점이다.
# 노드의 개수가 N개일 때, 알고리즘상으로 N번의 단계를 수행하며, 단계마다 O(N^2)의 연산을 통해 '현재 노드를 거쳐 가는' 모든 경로를 고려한다.
# 플로이드 워셜 알고리즘의 총시간 복잡도는 O(N^3)이다.
# 2차원 리스트에 '최단 거리' 정보를 저장한다는 특징.
# 모든 노드에 대하여 다른 모든 노드로 가는 최단 거리 정보를 담아야 하기 때문 -> 2차원 리스트를 처리해야 하므로 N번의 단계에서 매번 O(N^2)의 시간이 소요
# 다익스트라 알고리즘 (그리디 알고리즘), 플로이드 워셜 알고리즘 (다이나믹 프로그래밍)
# 현재 확인하고 있는 노드를 제외하고, N - 1개의 노드 중에서 서로 다른 노드(A,B)쌍을 선택한다. => A->1번 노드->B 로 가는 비용을 확인한 뒤에 최단 거리 갱신
# 점화식 D_ad = min(D_ab, D_ak + D_kb) : 3중 반복문을 이용하여 이 점화식에 따라 최단 거리 테이블을 갱신
# => 'A에서 B로 가는 최소 비용' 과 'A에서 K를 거쳐 B로 가는 비용'을 비교하여 더 작은 값으로 갱신.

# 무한을 의미하는 값으로 10억을 설정
INF = int(1e9)
# 노드의 개수 및 간선의 개수를 입력받기
n = int(input())
m = int(input())

# 2차원 리스트(그래프 표현)을 만들고, 모든 값을 무한으로 초기화
graph = [[INF]*(n+1) for _ in range(n+1)]

# 자기 자신에서 자기 자신으로 가는 비용은 0으로 초기화
for a in range(1, n + 1):
    for b in range(1, n+1):
        if a == b:
            graph[a][b] = 0

# 각 간선에 대한 정보를 입력받아, 그 값으로 초기화
for _ in range(m):
    # A에서 B로 가는 비용은 C라고 설정
    a, b, c = map(int,input().split())
    graph[a][b] = c

# 점화식에 따라 플로이드 워셜 알고리즘을 수행
for k in range(1,n+1):
    for a in range(1, n+1):
        for b in range(1, n+1):
            graph[a][b] = min(graph[a][b], graph[a][k] + graph[k][b])

# 수행된 결과를 출력
for a in range(1, n+1):
    for b in range(1, n+1):
        #도달할 수 없는 경우, 무한(INFINITY)이라고 출력
        if graph[a][b] == INF:
            print("INFINITY", end=" ")
        # 도달할 수 있는 경우 거리를 출력
        else:
            print(graph[a][b], end=" ")
    print()

