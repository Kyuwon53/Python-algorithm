# 다이나믹 프로그래밍 사용 조건
# 1. 큰 문제를 작은 문제로 나눌 수 있다.
# 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다

# 피보나치 함수 메모이제이션 기법
# 한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하여 메모한 결과를 그대로 가져오는 기법
# 메모이제이션은 값을 저장하는 방법으로 캐싱(Caching)이라고도 한다.
# 한 번 구한 정보를 리스트에 저장하는 것. 같은 정보가 필요할 때는 이미 구한 정답을 그대로 리스트에서 가져오면 된다.

# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0]*100

# 피보나치 재귀
def fibonacci(x):
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라 피보나치
    d[x] = fibonacci(x-1) + fibonacci(x-2)
    return d[x]
print(fibonacci(99))
